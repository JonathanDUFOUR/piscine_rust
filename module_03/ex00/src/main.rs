fn choose<T>(values: &[T]) -> &T {
	#[inline(always)]
	fn random_index(len: usize) -> usize {
		use ftkit::random_number;

		return (random_number(i32::MIN..i32::MAX) as u32 as usize
			* random_number(i32::MIN..i32::MAX) as u32 as usize)
			% len;
	}
	assert!(!values.is_empty(), "Cannot choose from an empty list");
	return &values[random_index(values.len())];
}

fn unit_test<T: PartialEq>(values: &[T]) -> Result<(), (&str, &T)> {
	for target in values {
		let mut has_been_chosen: bool = false;

		for _ in 0..values.len() * 42 {
			let chosen: &T = choose(&values);

			if chosen == target {
				has_been_chosen = true;
				break;
			}

			let mut is_chosen_part_of_values: bool = false;
			for value in values {
				if chosen == value {
					is_chosen_part_of_values = true;
					break;
				}
			}
			if !is_chosen_part_of_values {
				return Err(("chosen value is not part of the values", chosen));
			}
		}
		if !has_been_chosen {
			return Err(("value has never been chosen", target));
		}
	}
	return Ok(());
}

fn main() {
	{
		let values: [u8; 42] = [
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
			24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
		];

		print!("test with [  u8;  42]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [i8; 21] = [
			-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
		];

		print!("test with [  i8;  21]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [u16; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

		print!("test with [ u16;  10]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [i16; 5] = [
			0b0000_0000,
			0b1000_0001,
			0b1100_0011,
			0b1110_0111,
			0b1111_1111,
		];

		print!("test with [ i16;   5]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [u32; 2] = [0xcad0b17e, 0xdeadbeef];

		print!("test with [ u32;   2]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [i32; 1] = [-1];

		print!("test with [ i32;   1]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [u64; 3] = [0xfee1baddfee1badd, 0xfee1600dfee1600d, 0xfee1deadfee1dead];

		print!("test with [ u64;   3]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [i64; 6] = [
			0x0123456789abcdef,
			0x123456789abcdef0,
			0x23456789abcdef01,
			0x3456789abcdef012,
			0x456789abcdef0123,
			0x56789abcdef01234,
		];

		print!("test with [ i64;   6]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [u128; 12] = [
			0x0123456789abcdef0123456789abcdef,
			0x123456789abcdef0123456789abcdef0,
			0x23456789abcdef0123456789abcdef01,
			0x3456789abcdef0123456789abcdef012,
			0x456789abcdef0123456789abcdef0123,
			0x56789abcdef0123456789abcdef01234,
			0x6789abcdef0123456789abcdef012345,
			0x789abcdef0123456789abcdef0123456,
			0x89abcdef0123456789abcdef01234567,
			0x9abcdef0123456789abcdef012345678,
			0xabcdef0123456789abcdef0123456789,
			0xbcdef0123456789abcdef0123456789a,
		];

		print!("test with [u128;  12]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [i128; 24] = [
			0x00000000000000000000000000000034,
			0x0000000000000000000000000000179b,
			0x0000000000000000ffffffffffffff8e,
			0x0000000000000000fffffffffffffcf7,
			0x00000000000000000000000000000002,
			0x000000000000000000000000007f5ca0,
			0x0000000000000000000000000000000e,
			0x0000000000000000000000002e501440,
			0x00000000000000000000000000000003,
			0x0000000000000000ffffffffffffd120,
			0x000000000000000000000000000015b3,
			0x00000000000000000000000000000178,
			0x00000000000000000000000000000000,
			0x00000000000000000000000000000b1d,
			0x00000000000000000000000000002015,
			0x00000000000000000000000000000065,
			0x0000000000000000fffffffffffffff9,
			0x0000000000000000000000000000001b,
			0x0000000000000000000000000000000d,
			0x0000000000000000000000000000c0a5,
			0x000000000000000000000000000947d9,
			0x0000000000000000000000000000002f,
			0x000000000000000000000000000003e8,
			0x000000000000000000000000000036bc,
		];

		print!("test with [i128;  24]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [f32; 48] = [
			0.00000, 0.00001, 0.00010, 0.00011, 0.00100, 0.00101, 0.00110, 0.00111, 0.01000,
			0.01001, 0.01010, 0.01011, 0.01100, 0.01101, 0.01110, 0.01111, 0.10000, 0.10001,
			0.10010, 0.10011, 0.10100, 0.10101, 0.10110, 0.10111, 0.11000, 0.11001, 0.11010,
			0.11011, 0.11100, 0.11101, 0.11110, 0.11111, 1.00000, 1.00001, 1.00010, 1.00011,
			1.00100, 1.00101, 1.00110, 1.00111, 1.01000, 1.01001, 1.01010, 1.01011, 1.01100,
			1.01101, 1.01110, 1.01111,
		];

		print!("test with [ f32;  48]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [f64; 96] = [
			f64::MAX,
			f64::MIN_POSITIVE,
			f64::INFINITY,
			f64::EPSILON,
			-f64::MAX,
			-f64::MIN_POSITIVE,
			-f64::INFINITY,
			-f64::EPSILON,
			1.1,
			22.22,
			333.333,
			4444.4444,
			55555.55555,
			666666.666666,
			7777777.7777777,
			88888888.88888888,
			999999999.999999999,
			10101010101010101010.10101010101010101010,
			1111111111111111111111.1111111111111111111111,
			121212121212121212121212.121212121212121212121212,
			13131313131313131313131313.13131313131313131313131313,
			1414141414141414141414141414.1414141414141414141414141414,
			151515151515151515151515151515.151515151515151515151515151515,
			16161616161616161616161616161616.16161616161616161616161616161616,
			1717171717171717171717171717171717.1717171717171717171717171717171717,
			181818181818181818181818181818181818.181818181818181818181818181818181818,
			19191919191919191919191919191919191919.19191919191919191919191919191919191919,
			2020202020202020202020202020202020202020.2020202020202020202020202020202020202020,
			212121212121212121212121212121212121212121.212121212121212121212121212121212121212121,
			22222222222222222222222222222222222222222222.22222222222222222222222222222222222222222222,
			2323232323232323232323232323232323232323232323.2323232323232323232323232323232323232323232323,
			242424242424242424242424242424242424242424242424.242424242424242424242424242424242424242424242424,
			25252525252525252525252525252525252525252525252525.25252525252525252525252525252525252525252525252525,
			2626262626262626262626262626262626262626262626262626.2626262626262626262626262626262626262626262626262626,
			272727272727272727272727272727272727272727272727272727.272727272727272727272727272727272727272727272727272727,
			28282828282828282828282828282828282828282828282828282828.28282828282828282828282828282828282828282828282828282828,
			2929292929292929292929292929292929292929292929292929292929.2929292929292929292929292929292929292929292929292929292929,
			303030303030303030303030303030303030303030303030303030303030.303030303030303030303030303030303030303030303030303030303030,
			31313131313131313131313131313131313131313131313131313131313131.31313131313131313131313131313131313131313131313131313131313131,
			3232323232323232323232323232323232323232323232323232323232323232.3232323232323232323232323232323232323232323232323232323232323232,
			333333333333333333333333333333333333333333333333333333333333333333.333333333333333333333333333333333333333333333333333333333333333333,
			34343434343434343434343434343434343434343434343434343434343434343434.34343434343434343434343434343434343434343434343434343434343434343434,
			3535353535353535353535353535353535353535353535353535353535353535353535.3535353535353535353535353535353535353535353535353535353535353535353535,
			363636363636363636363636363636363636363636363636363636363636363636363636.363636363636363636363636363636363636363636363636363636363636363636363636,
			37373737373737373737373737373737373737373737373737373737373737373737373737.37373737373737373737373737373737373737373737373737373737373737373737373737,
			3838383838383838383838383838383838383838383838383838383838383838383838383838.3838383838383838383838383838383838383838383838383838383838383838383838383838,
			393939393939393939393939393939393939393939393939393939393939393939393939393939.393939393939393939393939393939393939393939393939393939393939393939393939393939,
			40404040404040404040404040404040404040404040404040404040404040404040404040404040.40404040404040404040404040404040404040404040404040404040404040404040404040404040,
			4141414141414141414141414141414141414141414141414141414141414141414141414141414141.4141414141414141414141414141414141414141414141414141414141414141414141414141414141,
			424242424242424242424242424242424242424242424242424242424242424242424242424242424242.424242424242424242424242424242424242424242424242424242424242424242424242424242424242,
			43434343434343434343434343434343434343434343434343434343434343434343434343434343434343.43434343434343434343434343434343434343434343434343434343434343434343434343434343434343,
			4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444.4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,
			454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545.454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545,
			46464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646.46464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646,
			4747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747.4747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747,
			484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848.484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848,
			49494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949.49494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949,
			5050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050.5050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050,
			515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151.515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151,
			52525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252.52525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252,
			5353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353.5353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353,
			545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454.545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454,
			55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555.55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555,
			5656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656.5656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656,
			575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757.575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757,
			58585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858.58585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858,
			5959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959.5959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959,
			606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060.606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060,
			61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161.61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161,
			6262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262.6262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262,
			636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363.636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363,
			64646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464.64646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464,
			6565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565.6565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565,
			666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666.666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,
			67676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767.67676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767,
			6868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868.6868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868,
			696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969.696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969,
			70707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070.70707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070,
			7171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171.7171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171,
			727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272.727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272,
			73737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373.73737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373,
			7474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474.7474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474747474,
			757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575.757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575,
			76767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676.76767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676,
			7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777.7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777,
			787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878.787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878,
			79797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979.79797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979,
			8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080.8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080,
			818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181.818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181,
			82828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282.82828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282,
			8383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383.8383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383838383,
			848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484.848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484848484,
			85858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585.85858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585,
			8686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686.8686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686,
			878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787.878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787,
			88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888.88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888,
		];

		print!("test with [ f96;  96]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
	{
		let values: [&str; 192] = [
			"I",
			"wanna",
			"be",
			"the",
			"very",
			"best",
			",",
			"like",
			"no",
			"one",
			"ever",
			"was",
			"!",
			"To",
			"catch",
			"them",
			"is",
			"my",
			"real",
			"test",
			",",
			"to",
			"train",
			"them",
			"is",
			"my",
			"cause",
			"!",
			"I",
			"will",
			"travel",
			"across",
			"the",
			"land",
			",",
			"searching",
			"far",
			"and",
			"wide",
			",",
			"each",
			"pokemon",
			"to",
			"understand",
			"the",
			"power",
			"that",
			"is",
			"inside",
			"!",
			"Pokemon",
			"!",
			"Gotta",
			"catch",
			"'em",
			"all",
			"!",
			"It's",
			"you",
			"and",
			"me",
			",",
			"I",
			"know",
			"it's",
			"my",
			"destiny",
			"!",
			"Pokemon",
			"!",
			"Oh",
			",",
			"you're",
			"my",
			"best",
			"friend",
			"!",
			"In",
			"a",
			"world",
			"we",
			"must",
			"defend",
			"!",
			"Pokemon",
			"!",
			"Gotta",
			"catch",
			"'em",
			"all",
			"!",
			"Our",
			"courage",
			"will",
			"pull",
			"us",
			"through",
			"!",
			"You",
			"teach",
			"me",
			"and",
			"I'll",
			"teach",
			"you",
			"!",
			"Pokemon",
			"!",
			"Gotta",
			"catch",
			"'em",
			"all",
			"!",
			"Gotta",
			"catch",
			"'em",
			"all",
			"!",
			"Pokemon",
			"!",
			"!",
			"!",
			"Every",
			"challenge",
			"along",
			"the",
			"way",
			"with",
			"courage",
			"I",
			"will",
			"face",
			"!",
			"I",
			"will",
			"battle",
			"every",
			"day",
			"to",
			"claim",
			"my",
			"rightful",
			"place",
			"!",
			"Come",
			"with",
			"me",
			",",
			"the",
			"time",
			"is",
			"right",
			"!",
			"There's",
			"no",
			"better",
			"team",
			"!",
			"Arm",
			"in",
			"arm",
			"we'll",
			"win",
			"the",
			"fight",
			"!",
			"It's",
			"always",
			"been",
			"our",
			"dream",
			"!",
			"Pokemon",
			"!",
			"Gotta",
			"catch",
			"'em",
			"all",
			"!",
			"It's",
			"you",
			"and",
			"me",
			",",
			"I",
			"know",
			"it's",
			"my",
			"destiny",
			"!",
			"Pokemon",
			"!",
		];

		print!("test with [&str; 192]: ");
		match unit_test(&values) {
			Ok(()) => println!("\x1b[38;2;0;255;0m[OK]\x1b[0m"),
			Err((error, value)) => {
				println!("\x1b[38;2;255;0;0m[KO]\x1b[0m");
				panic!("{error}: {value}");
			},
		}
	}
}
